# 构建工具

在无构建工具时，开发人员需要做以下事情：

- 依赖管理：手动导入 Jar 包；
- 测试：手动在 main 方法中执行测试；
- 打包：通过 IDE 导出 Jar 包；
- 发布：通过 FTP 上传到服务器上。

主流构建工具包括 Ant、Maven 和 Gradle。

Gradle 和 Maven 的区别是，它使用 Groovy 这种特定领域语言（DSL）来管理构建脚本，而不再使用 XML 这种标记性语言。因为项目如果庞大的话，XML 很容易就变得臃肿。

![](index_files/897503d0-59e3-4752-903d-529fbdb72fee.jpg)

# Maven

## 概述

提供了项目对象模型（POM）文件来管理项目的构建。

## 仓库

依赖库的搜索顺序为：本地仓库、中央仓库、远程仓库。

- 本地仓库用来存储项目的依赖库，默认的文件夹是“.m2”目录。
- 中央仓库是用来下载项目依赖库的默认位置。
- 远程仓库，因为并非所有的库存储在中央仓库，对于不在中央仓库的依赖库就需要使用远程仓库。

## POM

[POM Reference](http://maven.apache.org/pom.html#Dependency_Version_Requirement_Specification)

POM 代表项目对象模型，它是一个 XML 文件，保存在项目根目录的 pom.xml 文件中。

```xml
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.12</version>
    <scope>test</scope>
</dependency>
```

[groupId, artifactId, version, packaging, classfier] 称为一个项目的坐标，groupId、artifactId、version 是必须定义的，packaging 是可选的（默认为 jar），而 classfier 是不能直接定义的，需要结合插件使用。

- groupId：项目组 Id，必须是唯一的；
- artifactId：项目 Id，即项目名；
- version：项目版本；
- packaging：项目打包方式。

## 依赖原则

### 依赖路径最短优先原则

A->B->C->X(1.0), A->D->X(2.0)。由于 X(2.0) 路径最短，所以项目使用的是 X(2.0)。

### 声明顺序优先原则

A->B->X(1.0)，A->C->X(2.0)，根据 pom 文件声明的顺序加载，如果先声明了 B，后声明了 C，那就最后的依赖就会是 X(1.0)。

### 覆写优先原则

子 pom 内声明的依赖优先于父 pom 中声明的依赖。

## 解决依赖冲突

找到 Maven 加载的 jar 包版本，使用 mvn dependency:tree 查看依赖树，根据依赖原则来调整依赖在 pom 文件的声明顺序。

# Gradle

[Gradle In Action(Gradle 实战) 中文版](https://lippiouyang.gitbooks.io/gradle-in-action-cn/content/)
