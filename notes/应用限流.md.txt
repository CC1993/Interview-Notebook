如果一段时间内请求数量过大，那么会给服务器造成很大压力，可能导致服务器无法提供其它服务。

在主从架构中，如果主库在一段时间内插入过多的数据，那么主从之间的同步就会有延迟，会导致从服务器上的数据错误。

# 计数器法

通过一个计数器来统计请求的数量，并且在指定的时间之后重置计数器。

![](index_files/abc704a9-897d-4b9c-9516-6367b111de33.jpg)

但是计数器方法有一个临界问题，例如用户在重置计数器的时刻前后突然请求可以超过限制的请求数量。

![](index_files/659a91ac-3364-4fd0-89b9-3482cacc9de0.jpg)

# 滑动窗口

是计数器算法的一种改进，将原来的一个时间窗口划分成多个时间窗口，并且不断向右滑动该窗口。在临界位置的突发请求数量都会被算到时间窗口内，因此可以解决计数器算法的临界问题。

![](index_files/a543cda9-9967-4a70-916f-af1714a453c4.jpg)

# 漏桶算法

漏桶算法能够以恒定速率处理请求。

![](index_files/ff11695d-249a-489a-af88-3c6cafc9db1e.jpg)

# 令牌桶算法

和漏桶算法的区别在于它是以恒定速率添加令牌，并且令牌桶的大小有限，超过一定的令牌之后再添加进来的令牌会被丢弃。

当一个应用请求到来时，先用令牌桶取出一个令牌，如果能取到令牌那么就可以处理该请求。

令牌桶算法允许突发请求，例如令牌桶存放了很多令牌，那么大量的突发请求会被执行。但是它不会出现临界问题，在令牌用完之后，令牌是以一个恒定的速度添加到令牌桶中的，因此不能再次发送大量突发请求。

![](index_files/1b8f6185-ec65-49a2-b72b-ad8049dba174.jpg)